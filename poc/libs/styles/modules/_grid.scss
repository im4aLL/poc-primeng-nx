@use 'sass:math';
$global-width: rem(1200) !default;
$default-grid-gutter: 20;
$grid-gutter: (
    small: rem($default-grid-gutter),
    medium: rem($default-grid-gutter),
    large: rem($default-grid-gutter),
    xxlarge: rem($default-grid-gutter),
) !default;
$grid-column-count: 12 !default;

$grid-small-gutter: rem(math.div($default-grid-gutter, 2)) !default;
$grid-medium-gutter: rem(math.div($default-grid-gutter, 2)) !default;
$grid-large-gutter: rem(math.div($default-grid-gutter, 2)) !default;
$grid-xxlarge-gutter: rem(math.div($default-grid-gutter, 2)) !default;

@mixin add-gutter() {
    padding-left: $grid-small-gutter;
    padding-right: $grid-small-gutter;

    @include breakpoint(medium-up) {
        padding-left: $grid-medium-gutter;
        padding-right: $grid-medium-gutter;
    }

    @include breakpoint(large-up) {
        padding-left: $grid-large-gutter;
        padding-right: $grid-large-gutter;
    }

    @include breakpoint(xxlarge-up) {
        padding-left: $grid-xxlarge-gutter;
        padding-right: $grid-xxlarge-gutter;
    }
}

@mixin aci-grid() {
    .container {
        max-width: $global-width;
        margin-left: auto;
        margin-right: auto;
    }

    .container--fluid {
        max-width: 100%;
    }

    .row {
        @include clearfix();
        @include add-gutter();
    }

    .columns {
        float: left;
        @include add-gutter();
    }

    .column {
        padding-left: map-get($grid-gutter, 'small');
        padding-right: map-get($grid-gutter, 'small');

        @include breakpoint(medium-up) {
            padding-left: map-get($grid-gutter, 'medium');
            padding-right: map-get($grid-gutter, 'medium');
        }

        @include breakpoint(large-up) {
            padding-left: map-get($grid-gutter, 'large');
            padding-right: map-get($grid-gutter, 'large');
        }

        @include breakpoint(xxlarge-up) {
            padding-left: map-get($grid-gutter, 'xxlarge');
            padding-right: map-get($grid-gutter, 'xxlarge');
        }
    }

    [class*='large-'],
    [class*='medium-'] {
        width: 100%;
    }

    @for $i from 1 through $grid-column-count {
        .small-#{$i} {
            width: math.percentage(math.div($i, $grid-column-count));
        }

        .small-offset-#{$i} {
            margin-left: math.percentage(math.div($i, $grid-column-count));
        }

        .small-pull-#{$i} {
            position: relative;
            left: -math.percentage(math.div($i, $grid-column-count));
        }

        .small-push-#{$i} {
            position: relative;
            left: math.percentage(math.div($i, $grid-column-count));
        }
    }

    @include breakpoint(medium-up) {
        @for $i from 1 through $grid-column-count {
            .medium-#{$i} {
                width: math.percentage(math.div($i, $grid-column-count));
            }

            .medium-offset-#{$i} {
                margin-left: math.percentage(math.div($i, $grid-column-count));
            }

            .medium-pull-#{$i} {
                position: relative;
                left: -math.percentage(math.div($i, $grid-column-count));
            }

            .medium-push-#{$i} {
                position: relative;
                left: math.percentage(math.div($i, $grid-column-count));
            }
        }
    }

    @include breakpoint(large-up) {
        @for $i from 1 through $grid-column-count {
            .large-#{$i} {
                width: math.percentage(math.div($i, $grid-column-count));
            }

            .large-offset-#{$i} {
                margin-left: math.percentage(math.div($i, $grid-column-count));
            }

            .large-pull-#{$i} {
                position: relative;
                left: -math.percentage(math.div($i, $grid-column-count));
            }

            .large-push-#{$i} {
                position: relative;
                left: math.percentage(math.div($i, $grid-column-count));
            }
        }
    }

    @include breakpoint(xxlarge-up) {
        @for $i from 1 through $grid-column-count {
            .xxlarge-#{$i} {
                width: math.percentage(math.div($i, $grid-column-count));
            }

            .xxlarge-offset-#{$i} {
                margin-left: math.percentage(math.div($i, $grid-column-count));
            }

            .xxlarge-pull-#{$i} {
                position: relative;
                left: -math.percentage(math.div($i, $grid-column-count));
            }

            .xxlarge-push-#{$i} {
                position: relative;
                left: math.percentage(math.div($i, $grid-column-count));
            }
        }
    }

    .column .row,
    .row .row,
    .row .column {
        padding-left: 0;
        padding-right: 0;
        margin-left: -$grid-small-gutter;
        margin-right: -$grid-small-gutter;

        @include breakpoint(medium-up) {
            margin-left: -$grid-medium-gutter;
            margin-right: -$grid-medium-gutter;
        }

        @include breakpoint(large-up) {
            margin-left: -$grid-large-gutter;
            margin-right: -$grid-large-gutter;
        }

        @include breakpoint(xxlarge-up) {
            margin-left: -$grid-xxlarge-gutter;
            margin-right: -$grid-xxlarge-gutter;
        }
    }

    .new-row {
        clear: left;
    }
}
